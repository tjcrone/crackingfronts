#!/bin/bash
# This is a Bash script to run main.m from the command line, in the
# background using Matlab. Pass the fully qualified filename of an
# input file or several input files as arguments. If -p is passed, 
# the run will be parallelized. Passing -v will print the version
# number and exit.

# multiporo version
ver="0.2.0dev"

# source file directory
source_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# parse arguments
parallel=0
numFiles=1
while [[ $# > 0 ]]; do
  key="$1"
  case $key in
    -v|--version) # show version and exit
    echo "multiporo v$VER"
    exit
    ;;
    -p|--parallel) # set parallel flag
    parallel=1
    ;;
    *) # anything else is considered an input file
    fileList[numFiles]=$key
    numFiles=$((numFiles+1))
    ;;
  esac
  shift
done
numFiles=$((numFiles-1))

# check number of files
if [[ $numFiles -lt 1 ]]; then
  echo "Error: at least one valid input file must be passed as an argument."
  exit 1
fi

# if only one input file use "parallel" mode
if [[ $numFiles -eq 1 ]]; then
  parallel=1
fi

# check input files
for i in $(seq 1 $numFiles); do
  infile=${fileList[$i]}
  if [[ ! -s $infile ]]; then
    echo "Error: $infile is not a valid input file."
    exit 1
  fi
  # check that first line includes '*** MULTIPORO INPUT FILE ***'
  head -n1 "$infile" | grep "\*\*\* MULTIPORO INPUT FILE \*\*\*" > /dev/null
  if [[ $? -ne 0 ]]; then
    echo "Error: $infile does not appear to be a valid input file."
    echo "The first line of the file must include '*** MULTIPORO INPUT FILE ***'"
    exit 1
  fi
done

# define tab based on os
os=`uname`
if [[ "$os" == 'Linux' ]]; then
  tab="\t"
elif [[ "$os" == 'Darwin' ]]; then
  tab="	"
fi

# function to extract parameter from input file
function extract_param() {
  eval $2=`grep "^$2" "$1" | \
    sed -E "s/\%.*$/ /g" | \
    sed -E "s/$tab/ /g" | \
    sed -E "s/=/ /g" | \
    sed -E "s/'//g" | \
    tr -s " " | \
    cut -d' ' -f2`
}

# run input files
for i in $(seq 1 $numFiles); do
  infile=${fileList[$i]}

  # extract output directory and file name from input file
  extract_param "$infile" output_dir
  extract_param "$infile" output_name

  # add trailing slash to output_dir if necessary
  length=${#output_dir}
  last_char=${output_dir:length-1:1}
  [[ $last_char != "/" ]] && output_dir="$output_dir/"; :

  # create log file and temporary run file
  logfile="${output_dir}${output_name}.log"
  tmpfile=`mktemp $infile.XXXXXX`

  # populate temporary file
  echo "cd $source_dir;" > $tmpfile
  echo "main('$infile');" >> $tmpfile

  # output some information to the log file
  git_hash=`git rev-parse HEAD`
  current_time=`date`
  echo "*** MULTIPORO LOG FILE ***" > $logfile
  echo >> $logfile
  echo "Starting multiporo at $current_time" >> $logfile
  echo "version: v$ver" >> $logfile
  echo "hash: $git_hash" >> $logfile
  echo "input: $infile" >> $logfile
  echo >> $logfile
  echo "*** INPUT FILE ***" >> $logfile
  echo >> $logfile
  cat $infile >> $logfile
  echo >> $logfile
  echo "*** MATLAB OUTPUT ***" >> $logfile
  echo >> $logfile

  # run matlab in background
  EXE=`which matlab`
  nohup $EXE -nodesktop -nosplash < $tmpfile >> $logfile 2>&1 &

  # delete temporary file
  rm $tmpfile

  # wait if running inputs sequentially
  if [[ parallel -eq "0" ]]; then
    wait
  fi
done
